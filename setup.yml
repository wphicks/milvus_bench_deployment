---
- name: Clone necessary repos
  hosts: localhost
  connection: local

  tasks:
    - name: Get short commit SHA for this repo
      command: "git rev-parse --short HEAD"
      args:
        chdir: "{{ inventory_dir }}"
      register: commit

    - name: Check git status
      command: "git diff-index --quiet HEAD -- || echo 'dirty'"
      args:
        chdir: "{{ inventory_dir }}"
      register: repo_status

    - name: Clone Milvus
      git:
        repo: https://github.com/wphicks/milvus.git
        dest: "{{ inventory_dir }}/milvus"
        version: dev-cagra2

    - name: Create '.docker-gpu' directory
      file:
        path: "{{ inventory_dir }}/milvus/.docker-gpu"
        state: directory

    - name: Pull Milvus
      command: docker-compose pull milvus
      args:
        chdir: "{{ inventory_dir }}"
      environment:
        TAG: "{{ commit.stdout }}"
      ignore_errors: true
      when: repo_status.stdout != "dirty"
      register: pull_milvus

    - name: Clean Milvus build
      command: "./build/builder_gpu.sh make clean"
      args:
        chdir: "{{ inventory_dir }}/milvus"
      register: clean_milvus
      when: pull_milvus is failed or pull_milvus is skipped

    - name: Build Milvus libs
      command: "./build/builder_gpu.sh make milvus-gpu"
      args:
        chdir: "{{ inventory_dir }}/milvus"
      environment:
        CHECK_BUILDER: 1
      register: build_milvus_libs
      when: clean_milvus is succeeded

    - name: Copy Milvus libs to expected location
      synchronize:
        src: "{{ inventory_dir }}/milvus/cmake_build/lib/"
        dest: "{{ inventory_dir }}/milvus/lib/"
        delete: yes
      register: copy_milvus_libs
      when: build_milvus_libs is succeeded

    - name: Build Milvus Docker image
      command: docker-compose build milvus
      args:
        chdir: "{{ inventory_dir }}"
      environment:
        TAG: "{{ commit.stdout }}"
      register: build_milvus_image
      when: copy_milvus_libs is succeeded

    - name: Push Milvus Docker image
      command: docker-compose push milvus
      args:
        chdir: "{{ inventory_dir }}"
      environment:
        TAG: "{{ commit.stdout }}"
      register: build_milvus_image
      when: build_milvus_image is succeeded and repo_status.stdout != "dirty"
      ignore_errors: true

    - name: Clone VectorDBBench
      git:
        repo: https://github.com/wphicks/VectorDBBench.git
        dest: "{{ inventory_dir }}/VectorDBBench"
        version: dev-gpu

    - name: Pull VectorDBBench
      command: docker-compose pull benchmark
      args:
        chdir: "{{ inventory_dir }}"
      environment:
        TAG: "{{ commit.stdout }}"
      ignore_errors: true
      when: repo_status.stdout != "dirty"
      register: pull_vdbb

    - name: Build VectorDBBench Docker image
      command: docker-compose build benchmark
      args:
        chdir: "{{ inventory_dir }}"
      environment:
        TAG: "{{ commit.stdout }}"
      register: build_vdbb_image
      when: pull_vdbb is failed or pull_vdbb is skipped

    - name: Push VectorDBBench Docker image
      command: docker-compose push benchmark
      args:
        chdir: "{{ inventory_dir }}"
      environment:
        TAG: "{{ commit.stdout }}"
      when: build_vdbb_image is succeeded and repo_status.stdout != "dirty"
      ignore_errors: true

    - name: Create 'volumes' directory
      file:
        path: "{{ inventory_dir }}/volumes"
        state: directory

    - name: Create 'volumes/etcd' directory
      file:
        path: "{{ inventory_dir }}/volumes/etcd"
        state: directory

    - name: Create 'volumes/minio' directory
      file:
        path: "{{ inventory_dir }}/volumes/minio"
        state: directory

    - name: Create 'volumes/milvus' directory
      file:
        path: "{{ inventory_dir }}/volumes/milvus"
        state: directory

    - name: Create 'volumes/dataset' directory
      file:
        path: "{{ inventory_dir }}/volumes/dataset"
        state: directory

    - name: Create 'volumes/results' directory
      file:
        path: "{{ inventory_dir }}/volumes/results"
        state: directory

    - name: Check if .htpasswd file exists
      stat:
        path: nginx/.htpasswd
      register: htpasswd_file
      tags:
        - credentials

    - pause:
        prompt: "Enter username:"
        echo: true
      when: "(htpasswd_file.stat.exists == false) or 'credentials' in (ansible_run_tags | default([]))"
      register: username
      no_log: true
      tags:
        - credentials

    - pause:
        prompt: "Enter password:"
        echo: false
      when: "(htpasswd_file.stat.exists == false) or 'credentials' in (ansible_run_tags | default([]))"
      register: password
      no_log: true
      tags:
        - credentials

    - name: Run docker command to create .htpasswd entry
      command: "docker run --rm xmartlabs/htpasswd {{ username.user_input }} {{ password.user_input }}"
      when: "htpasswd_file.stat.exists == false or 'credentials' in (ansible_run_tags | default([]))"
      no_log: true
      register: credentials_line
      tags:
        - credentials

    - name: Append to .htpasswd
      lineinfile:
        path: "nginx/.htpasswd"
        line: "{{ credentials_line.stdout }}"
        create: yes
      when: credentials_line is changed
      tags:
        - credentials

    - name: Confirm Docker network available
      docker_network:
        name: milvus
        state: present

    - name: Deploy Milvus and VectorDBBench
      command: docker-compose up -d --remove-orphans
      args:
        chdir: "{{ inventory_dir }}"
      environment:
        TAG: "{{ commit.stdout }}"
